import math

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from peewee import fn

from bot.databases.database import Realty
from bot.utils.utils import get_text
from config import settings


def get_admin_panel_kb():
    ikb = InlineKeyboardBuilder()
    ikb.row(
        InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üì¢", callback_data="admin_mailing"),
        InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ ‚öôÔ∏è", callback_data="all_ads_1"),
        width=1
    )
    return ikb.as_markup(resize_keyboard=True)



def get_cancel_mailing_kb():
    ikb = InlineKeyboardBuilder()

    ikb.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data=f'back_to_admin_panel'))

    return ikb.as_markup()


async def get_list_all_ads_kb(page, call):
    ikb = InlineKeyboardBuilder()
    # 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å COUNT)
    total_ads_count = Realty.select(fn.COUNT(Realty.id)).scalar()

    # 2. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(total_ads_count / settings.bot.COUNT_IN_PAGE) if total_ads_count > 0 else 1

    # 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ OFFSET
    if page < 1:
        page = 1
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å, –æ—Ç–≤–µ—á–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º.
    if total_ads_count > 0 and page > total_pages:
        await call.answer('–î–∞–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç!')
        return None

    # 4. –†–∞—Å—á–µ—Ç OFFSET
    start_idx = (page - 1) * settings.bot.COUNT_IN_PAGE

    # 5. –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (LIMIT –∏ OFFSET)
    ads_on_page = (
        Realty.select()
        .order_by(Realty.consent_admin.asc(nulls='FIRST'))
        .limit(settings.bot.COUNT_IN_PAGE)
        .offset(start_idx)
    )
    ads_list = list(ads_on_page)

    if total_ads_count > settings.bot.COUNT_IN_PAGE:

        count = start_idx
        for ad in ads_list:
            status = '‚úÖ' if ad.consent_admin else 'üîò' if ad.consent_admin is None else 'ü•∑'

            ikb.row(InlineKeyboardButton(
                text=f'{status} {ad.price}‚Ç¨ - {ad.city} - {get_text(ad.ad_type, "ru")}',
                callback_data=f'admin_view_ad_{ad.id}_{page}'
            ))
            count += 1

        big_jump_right = page + 10 if total_pages > page + 10 else total_pages
        big_jump_left = page - 10 if page - 10 > 1 else 1

        ikb.row(
            InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'all_ads_{big_jump_left}'),
            InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'all_ads_{page - 1}'),
            InlineKeyboardButton(text=f'{page}/{total_pages}', callback_data='all_ads'),
            InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'all_ads_{page + 1}'),
            InlineKeyboardButton(text='‚è©', callback_data=f'all_ads_{big_jump_right}')
        )

    else:
        count = 1
        for ad in ads_list:
            status = '‚úÖ' if ad.consent_admin else 'üîò' if ad.consent_admin is None else 'ü•∑'

            ikb.row(InlineKeyboardButton(
                text=f'{status} {ad.price} ‚Ç¨ - {ad.city} - {get_text(ad.ad_type, "ru")}',
                callback_data=f'admin_view_ad_{ad.id}_{page}'
            ))
            count += 1

    ikb.row(InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f'back_to_admin_panel'))

    return ikb.as_markup()


def get_manage_realty_kb(realty_id, consent_admin, photo_number, page) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üîò –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'admin_in_detail_{realty_id}_{photo_number}_{page}')
    )
    builder.row(
        InlineKeyboardButton(text='üîÑ –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', callback_data=f'admin_next_photo_{realty_id}_{photo_number}_{page}')
    )

    if consent_admin is None:
        builder.row(
            InlineKeyboardButton(text='‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'admin_accept_realty_{realty_id}_{photo_number}_{page}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin_decline_realty_{realty_id}_{photo_number}_{page}'),
        )
    elif consent_admin:
        builder.row(InlineKeyboardButton(text='ü•∑ –°–∫—Ä—ã—Ç—å', callback_data=f'admin_decline_realty_{realty_id}_{photo_number}_{page}'))
    else:
        builder.row(InlineKeyboardButton(text='‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'admin_accept_realty_{realty_id}_{photo_number}_{page}'))

    builder.row(InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f'all_ads_{page}'))

    return builder.as_markup()


def get_manage_realty2_kb(realty_id, consent_admin, photo_number, page) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='‚ñ´Ô∏è —Å–∫—Ä—ã—Ç—å', callback_data=f'admin_hide_details_{realty_id}_{photo_number}_{page}')
    )
    builder.row(
        InlineKeyboardButton(text='üîÑ –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', callback_data=f'admin_next_photo2_{realty_id}_{photo_number}_{page}')
    )
    if consent_admin is None:
        builder.row(
            InlineKeyboardButton(text='‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'admin_accept_realty_{realty_id}_{photo_number}_{page}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'decline_realty_{realty_id}_{photo_number}_{page}'),
        )
    elif consent_admin:
        builder.row(InlineKeyboardButton(text='ü•∑ –°–∫—Ä—ã—Ç—å', callback_data=f'admin_decline_realty_{realty_id}_{photo_number}_{page}'))
    else:
        builder.row(InlineKeyboardButton(text='‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=f'admin_accept_realty_{realty_id}_{photo_number}_{page}'))

    builder.row(InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f'all_ads_{page}'))
    return builder.as_markup()
